name: Prepare Release

on:
  workflow_dispatch:
    
jobs:

  prepare:
    runs-on: ubuntu-latest
    environment: release

    steps:
      - name: Add third-party repository for PHP
        run: |
          if ! grep -q "^deb .*/ondrej/php" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
            sudo add-apt-repository -y ppa:ondrej/php
            sudo apt-get update
          fi

      - name: Install PHP 8.3 and Composer
        run: |
          if ! php -v | grep -q "PHP 8.3"; then
            sudo apt-get install -y php8.3-cli php8.3-xml
            sudo update-alternatives --set php /usr/bin/php8.3
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            php -r "unlink('composer-setup.php');"
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-progress

      - name: Push vendor
        run: |
          git config --local user.email "durianbohong@gmail.com"
          git config --local user.name "il4mb"
          git add -f vendor
          git commit -m "Add vendor directory for release" || echo "No changes to commit"
          git push origin main

  release:
    runs-on: ubuntu-latest
    needs: prepare
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive
          git submodule foreach --recursive git checkout main
          git submodule foreach --recursive git pull origin main

      - name: Get last tag
        id: last-tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --list 'v*.*.*' | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            echo "No tags found. Starting with v0.0.1"
            new_tag="v0.0.1"
          else
            # Remove the 'v' prefix for easier manipulation
            version=${latest_tag#v}
            
            # Increment the patch version
            new_version=$(echo "$version" | awk -F. -v OFS=. '{$NF++;print}')
            
            # Construct new tag
            new_tag="v$new_version"
          fi
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"     
  
      - name: Set environment variable
        run: echo "NEW_TAG=${{ steps.last-tag.outputs.new_tag }}" >> $GITHUB_ENV
  
      - name: Display new tag
        run: echo "New tag is $NEW_TAG"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
          draft: false
          prerelease: true
          body: "Release with vendor files included."

